// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Flou21",
            "email": "muehlhans.f@coflnet.com"
        },
        "license": {
            "name": "AGPL v3"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/new-auctions": {
            "get": {
                "description": "returns the amount of auctions within in the last x minutes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Get recent auctions",
                "parameters": [
                    {
                        "maximum": 2880,
                        "minimum": 1,
                        "type": "integer",
                        "description": "duration in minutes",
                        "name": "duration",
                        "in": "query"
                    }
                ]
            }
        },
        "/notifier": {
            "put": {
                "description": "states, next / last evaluation will be ignored, replaces the notifier with the same ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifiers"
                ],
                "summary": "updates a notifier",
                "parameters": [
                    {
                        "description": "Notifier",
                        "name": "notifier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Notifier"
                        }
                    }
                ]
            },
            "post": {
                "description": "states, next / last evaluation will be ignored",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifiers"
                ],
                "summary": "creates a notifier",
                "parameters": [
                    {
                        "description": "Notifier",
                        "name": "notifier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Notifier"
                        }
                    }
                ]
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifiers"
                ],
                "summary": "deletes a notifier with a specifc ID",
                "parameters": [
                    {
                        "description": "Notifier",
                        "name": "notifier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Notifier"
                        }
                    }
                ]
            }
        },
        "/notifier/{userId}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifiers"
                ],
                "summary": "lists the notifiers of a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ]
            }
        }
    },
    "definitions": {
        "model.Notifier": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertText": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "evaluationInterval": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "lastEvaluation": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nextEvaluation": {
                    "type": "string"
                },
                "notifierStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NotifierState"
                    }
                },
                "notifierTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NotifierTemplate"
                    }
                },
                "templateOperator": {
                    "type": "string"
                },
                "timeUntilTrigger": {
                    "description": "TimeUntilTrigger like the grafana pending state time",
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "model.NotifierState": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "model.NotifierTemplate": {
            "type": "object",
            "properties": {
                "durationToCheck": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api/",
	Schemes:     []string{},
	Title:       "Auction Stats API",
	Description: "API for Auction Stats Service",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
